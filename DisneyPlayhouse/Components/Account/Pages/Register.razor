@page "/Account/Register"

@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using DisneyPlayhouse.Models
@using DisneyPlayhouseLibrary.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using DisneyPlayhouse.Data
@using DisneyPlayhouseLibrary.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject ILogger<Register> Logger
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IMemberData memberData

<PageTitle>Register</PageTitle>

<h1>Register</h1>

<div class="row">
    <div class="col-md-8">
        <StatusMessage Message="@Message" />
        <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
            <DataAnnotationsValidator />
            <h2>Create a new account.</h2>
            <hr />
            <ValidationSummary class="text-danger" role="alert" />
            <div class="form-floating mb-3">
                <InputText @bind-Value="Input.LoginId" class="form-control" autocomplete="username" aria-required="true" placeholder="Enter Login ID" />
                <label for="email">Login ID</label>
                <ValidationMessage For="() => Input.LoginId" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="password">Password</label>
                <ValidationMessage For="() => Input.Password" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" placeholder="password" />
                <label for="confirm-password">Confirm Password</label>
                <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="Input.CurrencyType" class="form-select">
                    <option value="SGD">SGD</option>
                    <option value="USD">USD</option>
                </InputSelect>
                <label for="select-role">Select Currency</label>
                <ValidationMessage For="() => Input.CurrencyType" class="text-danger" />
            </div>
            <div class="form-floating mb-3">
                <InputSelect @bind-Value="Input.Role" class="form-select">
                    <option value="Member">Member</option>
                </InputSelect>
                <label for="select-role">Select Role</label>
                <ValidationMessage For="() => Input.Role" class="text-danger" />
            </div>
            <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
        </EditForm>
    </div>
</div>

@code {
    private IEnumerable<IdentityError>? identityErrors;
    private ILib_MemberDetailsModel newMemberDetails = new MemberDetailsModel();

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.LoginId, CancellationToken.None);
        user.CurrencyType = Input.CurrencyType;
        //var emailStore = GetEmailStore();
        //await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }
        await UserManager.AddToRoleAsync(user, Input.Role);

        Logger.LogInformation("User created a new account with password.");

        newMemberDetails.LoginId = Input.LoginId;
        newMemberDetails.ParentLoginId = Input.LoginId;
        newMemberDetails.AutoCredit = true;
        newMemberDetails.CreatedDate = DateTime.Now;
        newMemberDetails.LatestLoggedInDate = DateTime.Now;


    await memberData.CreateNewMemberDetails(newMemberDetails);

        //var userId = await UserManager.GetUserIdAsync(user);
        //var code = await UserManager.GenerateEmailConfirmationTokenAsync(user);
        //code = WebEncoders.Base64UrlEncode(Encoding.UTF8.GetBytes(code));
        //var callbackUrl = NavigationManager.GetUriWithQueryParameters(
        //    NavigationManager.ToAbsoluteUri("Account/ConfirmEmail").AbsoluteUri,
        //    new Dictionary<string, object?> { ["userId"] = userId, ["code"] = code, ["returnUrl"] = ReturnUrl });

        //await EmailSender.SendConfirmationLinkAsync(user, Input.Email, HtmlEncoder.Default.Encode(callbackUrl));

        //if (UserManager.Options.SignIn.RequireConfirmedAccount)
        //{
        //    RedirectManager.RedirectTo(
        //        "Account/RegisterConfirmation",
        //        new() { ["email"] = Input.Email, ["returnUrl"] = ReturnUrl });
        //}

        await SignInManager.SignInAsync(user, isPersistent: false);
        RedirectManager.RedirectTo(ReturnUrl);
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    //private IUserEmailStore<ApplicationUser> GetEmailStore()
    //{
    //    if (!UserManager.SupportsUserEmail)
    //    {
    //        throw new NotSupportedException("The default UI requires a user store with email support.");
    //    }
    //    return (IUserEmailStore<ApplicationUser>)UserStore;
    //}

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "Login ID")]
        public string LoginId { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 6)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "Role")]
        public string Role { get; set; } = "";

        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "Currency Type")]
        public string CurrencyType { get; set; } = "";
    }
}

@using DisneyPlayhouse.Models
@using DisneyPlayhouseLibrary.Data
@using DisneyPlayhouseLibrary.Models

@inject IReportData reportData 
@inject IMemberData memberData

@page "/Report4D"

<PageTitle>Report 4D</PageTitle>

@attribute [Authorize(Roles = "Member")]

<AuthorizeView>
    <Report4DSelectArea OnSubmit="HandleReportSubmit"></Report4DSelectArea>

    <div class="container">
        <div class="table-responsive">
            <table class="table table-striped table-bordered table-hover">
                <thead>
                    <tr style="text-align:center;" class="table-dark text-center">
                        <th scope="col">Draw Date</th>
                        <th scope="col">Member ID</th>
                        <th scope="col">Role</th>
                        <th scope="col">Currency</th>
                        <th scope="col">Big</th>
                        <th scope="col">Small</th>
                        <th scope="col">Comms %</th>
                        <th scope="col">Ticket Amt</th>
                        <th scope="col">Actual Amt</th>
                        <th scope="col">Strike Amt</th>
                        <th scope="col">Balance</th>
                    </tr>
                </thead>
                <tbody style="text-align:center;" class="table-light">
                    @if (pageReportRecords.Count > 0)
                    {
                        @foreach(var pageReport in pageReportRecords)
                        {
                            @foreach(var record in pageReport)
                            {
                                <tr>
                                    <td>@record.DrawDate.ToLongDateString()</td>
                                    <td>@record.MemberId</td>
                                    <td>Role</td>
                                    <td>Currency</td>
                                    <td>@record.TotalBig</td>
                                    <td>@record.TotalSmall</td>
                                    <td>Comms %</td>
                                    <td>$@record.TotalAmount</td>
                                    <td>Actual</td>
                                    <td>@record.TotalStrikeAmount</td>
                                    <td>$@(record.TotalAmount - record.TotalStrikeAmount)</td>
                                </tr>
                            }
                        }
                    }
                    else
                    {
                        <tr>
                            <th scope="col" colspan="12">
                                No Data To Show
                            </th>
                        </tr>
                    }
                </tbody>
            </table>
        </div>
    </div>

</AuthorizeView>
@code {
    private List<List<Lib_PageReportRecords>> pageReportRecords = new List<List<Lib_PageReportRecords>>();

    private async Task HandleReportSubmit((string reportForId, DateTime fromDate, DateTime toDate) submittedValue)
    {
        pageReportRecords = new List<List<Lib_PageReportRecords>>();
        ILib_ReportHistoryModel currentUserHistory = new Lib_ReportHistoryModel();
        List<Lib_PageReportRecords> UserPageReportRecords = new List<Lib_PageReportRecords>();

         var dateRangeForCurrentUser = await reportData.GetDateRangeForCurrentUserPageReport(submittedValue.reportForId, submittedValue.fromDate, submittedValue.toDate);

        foreach(var dateRange in dateRangeForCurrentUser)
        {
            Lib_PageReportRecords tempRecord = new Lib_PageReportRecords();
            tempRecord.Invoices = await reportData.GetPageRecordsForUserOnDrawDate(submittedValue.reportForId, dateRange.DrawDate.Date);
            tempRecord.DrawDate = dateRange.DrawDate.Date;
            tempRecord.MemberId = submittedValue.reportForId;
            tempRecord.TotalBig = tempRecord.Invoices.Sum(x => x.TotalBig);
            tempRecord.TotalSmall = tempRecord.Invoices.Sum(x => x.TotalSmall);
            tempRecord.TotalAmount = tempRecord.Invoices.Sum(x => x.TotalAmount);
            tempRecord.TotalStrikeAmount = tempRecord.Invoices.Sum(x => x.StrikeAmount);
            UserPageReportRecords.Add(tempRecord);
        }
        pageReportRecords.Add(UserPageReportRecords);

        // get childid of current user
        var childId = await memberData.GetListOfChildId(submittedValue.reportForId);

        foreach(var child in childId)
        {
            List<Lib_PageReportRecords> ChildPageReportRecords = new List<Lib_PageReportRecords>();
            var dateRangeForChild = await reportData.GetDateRangeForCurrentUserPageReport(child.ChildId , submittedValue.fromDate, submittedValue.toDate);

            foreach(var dateRange in dateRangeForChild)
            {
                Lib_PageReportRecords tempChildRecord = new Lib_PageReportRecords();
                tempChildRecord.Invoices = await reportData.GetPageRecordsForUserOnDrawDate(child.ChildId, dateRange.DrawDate.Date);
                tempChildRecord.DrawDate = dateRange.DrawDate.Date;
                tempChildRecord.MemberId = child.ChildId;
                tempChildRecord.TotalBig = tempChildRecord.Invoices.Sum(x => x.TotalBig);
                tempChildRecord.TotalSmall = tempChildRecord.Invoices.Sum(x => x.TotalSmall);
                tempChildRecord.TotalAmount = tempChildRecord.Invoices.Sum(x => x.TotalAmount);
                tempChildRecord.TotalStrikeAmount = tempChildRecord.Invoices.Sum(x => x.StrikeAmount);
                ChildPageReportRecords.Add(tempChildRecord);
            }
            pageReportRecords.Add(ChildPageReportRecords);
        }
    }
}

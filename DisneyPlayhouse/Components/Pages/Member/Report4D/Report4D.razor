@using DisneyPlayhouse.Models
@using DisneyPlayhouseLibrary.Data
@using DisneyPlayhouseLibrary.Models

@inject IReportData reportData 
@inject IMemberData memberData
@inject IStringLocalizer<Resource> localizer

@page "/Report4D"

<PageTitle>@localizer["PageReportPage"]</PageTitle>

@attribute [Authorize(Roles = "Player,Master,Agent,Senior")]

<AuthorizeView>
    <Report4DSelectArea OnSubmit="HandleReportSubmit"></Report4DSelectArea>
    <div class="container">
        <div class="table-responsive">
            <table class="table table-striped table-bordered table-hover">
                <thead>
                    <tr style="text-align:center;" class="table-dark text-center">
                        <th scope="col">Member ID</th>
                        <th scope="col">Day</th>
                        <th scope="col">Draw Date</th>
                        <th scope="col">Big</th>
                        <th scope="col">Small</th>
                        <th scope="col">Ticket Amt</th>
                        <th scope="col">Strike Amt</th>
                        <th scope="col">Balance</th>
                    </tr>
                </thead>
                <tbody style="text-align:center;" class="table-light">
                    <Report4DParentDetails masterView="masterView"></Report4DParentDetails>
                </tbody>
            </table>
        </div>
    </div>


    <div class="container">
        <div class="table-responsive">
            <table class="table table-striped table-bordered table-hover">
                <thead>
                    <tr style="text-align:center;" class="table-dark text-center">
                        <th scope="col">Member ID</th>
                        <th scope="col">Role</th>
                        <th scope="col">Big</th>
                        <th scope="col">Small</th>
                        <th scope="col">Ticket Amt</th>
                        <th scope="col">Strike Amt</th>
                        <th scope="col">Balance</th>
                    </tr>
                </thead>
                <tbody style="text-align:center;" class="table-light">
                    <Report4DChildDetails childView="childView"></Report4DChildDetails>
                </tbody>
            </table>
        </div>
    </div>

</AuthorizeView>
@code {
    private List<List<Lib_PageReportRecords>> pageReportRecords = new List<List<Lib_PageReportRecords>>();
    private List<DateTime> listOfDrawDates = new List<DateTime>();
    private List<string> listOfChildIds = new List<string>();
    List<PageReportTotalViewModel> masterView = new List<PageReportTotalViewModel>();
    List<PageReportChildTotalViewModel> childView = new List<PageReportChildTotalViewModel>();
    private string reportForId;
    [CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; }

    //Intialized async
    protected override async Task OnInitializedAsync()
    {
        reportForId = AuthStateTask.Result.User.Identity.Name;
    }

    private async Task HandleReportSubmit((string reportForId, DateTime fromDate, DateTime toDate) submittedValue)
    {
        childView.Clear();
        listOfChildIds.Clear();
        pageReportRecords = new List<List<Lib_PageReportRecords>>();
        ILib_ReportHistoryModel currentUserHistory = new Lib_ReportHistoryModel();
        List<Lib_PageReportRecords> UserPageReportRecords = new List<Lib_PageReportRecords>();

        var dateRangeForCurrentUser = await reportData.GetDateRangeForCurrentUserPageReport(submittedValue.reportForId, submittedValue.fromDate, submittedValue.toDate);

        foreach(var dateRange in dateRangeForCurrentUser)
        {
            Lib_PageReportRecords tempRecord = new Lib_PageReportRecords();
            tempRecord.Invoices = await reportData.GetPageRecordsForUserOnDrawDate(submittedValue.reportForId, dateRange.DrawDate.Date);
            tempRecord.DrawDate = dateRange.DrawDate.Date;
            tempRecord.MemberId = submittedValue.reportForId;
            tempRecord.TotalBig = tempRecord.Invoices.Sum(x => x.TotalBig);
            tempRecord.TotalSmall = tempRecord.Invoices.Sum(x => x.TotalSmall);
            tempRecord.TotalAmount = tempRecord.Invoices.Sum(x => x.TotalAmount);
            tempRecord.TotalStrikeAmount = tempRecord.Invoices.Sum(x => x.StrikeAmount);
            UserPageReportRecords.Add(tempRecord);
            listOfDrawDates.Add(dateRange.DrawDate);
        }
        pageReportRecords.Add(UserPageReportRecords);

        // get childid of current user
        var childId = await memberData.GetListOfChildId(submittedValue.reportForId);
        listOfChildIds.Add(submittedValue.reportForId);
        foreach(var child in childId)
        {
            listOfChildIds.Add(child.ChildId);
        }

        foreach(var child in childId)
        {
            List<Lib_PageReportRecords> ChildPageReportRecords = new List<Lib_PageReportRecords>();
            var dateRangeForChild = await reportData.GetDateRangeForCurrentUserPageReport(child.ChildId , submittedValue.fromDate, submittedValue.toDate);

            foreach(var dateRange in dateRangeForChild)
            {
                Lib_PageReportRecords tempChildRecord = new Lib_PageReportRecords();
                tempChildRecord.Invoices = await reportData.GetPageRecordsForUserOnDrawDate(child.ChildId, dateRange.DrawDate.Date);
                tempChildRecord.DrawDate = dateRange.DrawDate.Date;
                tempChildRecord.MemberId = child.ChildId;
                tempChildRecord.TotalBig = tempChildRecord.Invoices.Sum(x => x.TotalBig);
                tempChildRecord.TotalSmall = tempChildRecord.Invoices.Sum(x => x.TotalSmall);
                tempChildRecord.TotalAmount = tempChildRecord.Invoices.Sum(x => x.TotalAmount);
                tempChildRecord.TotalStrikeAmount = tempChildRecord.Invoices.Sum(x => x.StrikeAmount);
                ChildPageReportRecords.Add(tempChildRecord);
                listOfDrawDates.Add(dateRange.DrawDate);
            }
            pageReportRecords.Add(ChildPageReportRecords);
        }

        var distinctDates = listOfDrawDates.Select(date => date.Date).Distinct().ToList();

        foreach(var dates in distinctDates)
        {
            PageReportTotalViewModel tempView = new PageReportTotalViewModel();
            tempView.ReportFor = reportForId;
            tempView.DrawDate = dates;
            tempView.TotalBig = pageReportRecords.Sum(x => x.Where(y => y.DrawDate == dates).Sum(z => z.TotalBig));
            tempView.TotalSmall = pageReportRecords.Sum(x => x.Where(y => y.DrawDate == dates).Sum(z => z.TotalSmall));
            tempView.TotalAmount = pageReportRecords.Sum(x => x.Where(y => y.DrawDate == dates).Sum(z => z.TotalAmount));
            tempView.TotalStrike = pageReportRecords.Sum(x => x.Where(y => y.DrawDate == dates).Sum(z => z.TotalStrikeAmount));
            tempView.Balance = tempView.TotalAmount - tempView.TotalStrike;
            masterView.Add(tempView);
        }


        foreach(var child in listOfChildIds)
        {
            PageReportChildTotalViewModel tempChildView = new PageReportChildTotalViewModel();
            tempChildView.MemberId = child;
            tempChildView.TotalBig = pageReportRecords.Sum(x => x.Where(y => y.MemberId == child).Sum(z => z.TotalBig));
            tempChildView.TotalSmall = pageReportRecords.Sum(x => x.Where(y => y.MemberId == child).Sum(z => z.TotalSmall));
            tempChildView.TotalAmount = pageReportRecords.Sum(x => x.Where(y => y.MemberId == child).Sum(z => z.TotalAmount));
            tempChildView.StrikeAmount= pageReportRecords.Sum(x => x.Where(y => y.MemberId == child).Sum(z => z.TotalStrikeAmount));
            tempChildView.Balance = tempChildView.TotalAmount - tempChildView.StrikeAmount;
            childView.Add(tempChildView);
        }
    }
}

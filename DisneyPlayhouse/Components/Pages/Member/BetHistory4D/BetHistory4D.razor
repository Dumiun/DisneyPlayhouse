@page "/BetHistory4D"
@using DisneyPlayhouseLibrary.Data
@using DisneyPlayhouseLibrary.Models

@inject IInvoiceData invoiceData
@inject IStringLocalizer<Resource> localizer
<PageTitle>@localizer["BetHisory4D"]</PageTitle>

@attribute [Authorize(Roles = "Member")]

<style>
    .accordion-button:not(.collapsed) {
        background-color: seagreen; /* Set your desired color for collapsed state here */
        color: white; /* Set your desired text color for collapsed state here */
    }

    .accordion-button.collapsed {
        background-color: steelblue; /* Set your desired active color here */
        color: white; /* Set your desired active text color here */
    }
</style>


<AuthorizeView>
   <BetHistorySelectArea BetHistoryForIdSet="SetBetHistoryFor" BetHistoryFromDateSet="SetBetHistoryFrom" BetHistoryToDateSet="SetBetHistoryTo" GetBetHistorySet="SetBetHistoryDisplay"></BetHistorySelectArea>
    <BetHistory4DPopUp @ref="popupRef" NumbersList="@NumberVariationsForSelectedInvoice"></BetHistory4DPopUp>
    <div class="accordion" style="font-size:small;">
    <div class="accordion-item">
        <h2 class="accordion-header">
            <button class="accordion-button" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseOne" aria-expanded="false" aria-controls="panelsStayOpen-collapseOne" disabled="@disableInvoiceDetailsView">
                @if (ViewInvoiceId != "")
                {
                        <strong>@localizer["InvoiceDetailsFor"]<label class="p-2 bg-dark bg-opacity-50 text-white">@ViewInvoiceId</label></strong>
                }
                else
                {
                        <strong>@localizer["NoInvoiceSelectedYet"]</strong>
                }
            </button>
        </h2>
            <div id="panelsStayOpen-collapseOne" class="accordion-collapse @(ViewInvoiceId != "" ? "show" : "collapse")" aria-labelledby="panelsStayOpen-headingOne">
                <div class="accordion-body bg-light">
                <div class="container">
                    <div class="table-responsive">
                            <table class="table table-striped table-bordered table-hover">
                                <thead class="text-white text-center bg-opacity-75 bg-dark">
                                <tr>
                                    <th>Index</th>
                                        <th>@localizer["DrawDate1"]</th>
                                        <th>@localizer["DrawDate2"]</th>
                                        <th>@localizer["DrawDate3"]</th>
                                        <th>@localizer["Number"]</th>
                                        <th>@localizer["VariationsAmt"]</th>
                                        <th>View Vars.</th>
                                        <th>@localizer["Big"]</th>
                                        <th>@localizer["Small"]</th>
                                        <th>@localizer["Roll"]</th>
                                        <th>@localizer["Day"]</th>
                                        <th>@localizer["ActualBig"]</th>
                                        <th>@localizer["ActualSmall"]</th>
                                        <th>@localizer["TAmount"]</th>
                                </tr>
                            </thead>
                            <tbody style="text-align:center;" class="table-light">
                                    @for (int i = 0; i < DetailsForSelectedInvoice.Count; i++)
                                    {
                                        var currentDetails = DetailsForSelectedInvoice[i]; // Capture the current Details object
                                        var uniqueId = "button_" + i; // Generate a unique identifier for the button
                                        <tr>
                                            <td>@(i + 1)</td>
                                            <td>@(DetailsForSelectedInvoice[i].DrawDate1 != DateTime.MinValue ? DetailsForSelectedInvoice[i].DrawDate1.ToLongDateString().ToString() : "")</td>
                                            <td>@(DetailsForSelectedInvoice[i].DrawDate2 != DateTime.MinValue ? DetailsForSelectedInvoice[i].DrawDate2.ToLongDateString().ToString() : "")</td>
                                            <td>@(DetailsForSelectedInvoice[i].DrawDate3 != DateTime.MinValue ? DetailsForSelectedInvoice[i].DrawDate3.ToLongDateString().ToString() : "")</td>
                                            <td>@DetailsForSelectedInvoice[i].Number</td>
                                            <td>@DetailsForSelectedInvoice[i].NoOfVariations</td>
                                            <td>
                                                <button id="@uniqueId" class="btn btn-sm btn-primary" @onclick="() => DisplayNumberVariations(currentDetails)">
                                                    <i class="bi bi-plus"></i>
                                                </button>
                                            </td>
                                            <td>@DetailsForSelectedInvoice[i].Big</td>
                                            <td>@DetailsForSelectedInvoice[i].Small</td>
                                            <td>@DetailsForSelectedInvoice[i].Roll</td>
                                            <td>@DetailsForSelectedInvoice[i].Day</td>
                                            <td>@DetailsForSelectedInvoice[i].ActualBig</td>
                                            <td>@DetailsForSelectedInvoice[i].ActualSmall</td>
                                            <td>$@DetailsForSelectedInvoice[i].TotalCostForEntry</td>
                                        </tr>
                                    }
                                    <tr>
                                        <td colspan="3"></td>
                                        <td colspan="2"><b>@localizer["TotalVariations"]:</b></td>
                                        <td><b class="text-success">@TotalVar</b></td>
                                        <td></td>
                                        <td colspan="4"><b>@localizer["InvoiceTotal"]:</b> </td>
                                        <td><b class="text-success">@TotalBig</b></td>
                                        <td><b class="text-success">@TotalSmall</b></td>
                                        <td><b class="text-success">$@TotalAmount</b></td>
                                    </tr>
                            </tbody>
                        </table>
                    </div>

                </div>
            </div>
        </div>
    </div>
    <div class="accordion-item">
        <h2 class="accordion-header" id="panelsStayOpen-headingTwo">
                <button class="accordion-button collapsed" type="button" data-bs-toggle="collapse" data-bs-target="#panelsStayOpen-collapseTwo" aria-expanded="true" aria-controls="panelsStayOpen-collapseTwo">
                    @if (BetHistoryFrom == DateTime.MinValue || BetHistoryTo == DateTime.MinValue)
                    {
                        <strong>@localizer["NoDateRangeSelectedYet"]</strong>
                    }
                    else
                    {
                        <strong>@localizer["InvoiceDateFrom"]<label class="p-2 bg-dark bg-opacity-50 text-white">@BetHistoryFrom.ToLongDateString()</label> @localizer["To"] <label class="p-2 bg-dark bg-opacity-50 text-white">@BetHistoryTo.ToLongDateString()</label> </strong>
                    }
                </button>
        </h2>
        <div id="panelsStayOpen-collapseTwo" class="accordion-collapse collapse show" aria-labelledby="panelsStayOpen-headingTwo">
                <div class="accordion-body bg-light">
                <div class="container">
                    <div class="table-responsive">
                        <table class="table table-striped table-bordered table-hover">
                            <div class="container">
                                <div class="table-responsive">
                                        <table class="table table-striped table-bordered table-hover">
                                        <thead class="text-white text-center bg-opacity-75 bg-dark">
                                            <tr>
                                                    <th scope="col">Index</th>
                                                    <th scope="col">@localizer["Date"]</th>
                                                    <th scope="col">@localizer["Time"]</th>
                                                    <th scope="col">@localizer["InvoiceId"]</th>
                                                    <th scope="col">@localizer["MemberId"]</th>
                                                    <th scope="col">@localizer["Media"]</th>
                                                    <th scope="col">@localizer["Big"]</th>
                                                    <th scope="col">@localizer["Small"]</th>
                                                    <th scope="col">@localizer["Amount"]</th>
                                                    <th scope="col">@localizer["PageName"]</th>
                                                    <th scope="col">@localizer["Details"]</th>
                                            </tr>
                                        </thead>
                                        <tbody style="text-align:center;" class="table-warning">
                                            @if (BetHistoryInvoiceList.Count > 0)
                                            {
                                                for(int i = 0; i < BetHistoryInvoiceList.Count; i++)
                                                {
                                                    var invoice = BetHistoryInvoiceList[i];
                                                    <tr>
                                                        <td>@(i+1)</td>
                                                        <td>@invoice.PurchasedDate.ToLongDateString()</td>
                                                        <td>@invoice.PurchasedDate.ToShortTimeString()</td>
                                                        <td>@invoice.InvoiceId</td>
                                                        <td>@invoice.PurchasedForId</td>
                                                        <td>@invoice.MediaType</td>
                                                        <td>@invoice.TotalBig</td>
                                                        <td>@invoice.TotalSmall</td>
                                                        <td>$@invoice.TotalAmount</td>
                                                        <td>@invoice.PageName</td>
                                                        <td>
                                                            <button class="btn btn-sm btn-success" @onclick="() => DisplayInvoiceDetails(invoice)">
                                                                <i class="bi bi-plus"></i>
                                                            </button>
                                                        </td>
                                                    </tr>
                                                }
                                            }
                                            else
                                            {
                                                <tr>
                                                        <td colspan="10"><strong>@localizer["NoDataToShow"]</strong></td>
                                                </tr>
                                            }
                                        </tbody>
                                    </table>
                                </div>
                            </div>
                        </table>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>
</AuthorizeView>
@code {
    [Parameter] public string BetHistoryForId { get; set; }
    [Parameter] public DateTime BetHistoryFrom { get; set; } 
    [Parameter] public DateTime BetHistoryTo { get; set; } 
    private List<ILib_InvoiceLevel1DataModel> BetHistoryInvoiceList = new List<ILib_InvoiceLevel1DataModel>();
    private List<ILib_InvoiceLevel2DataModel> DetailsForSelectedInvoice = new List<ILib_InvoiceLevel2DataModel>();
    private List<ILib_InvoiceLevel4DataModel> NumberVariationsForSelectedInvoice = new List<ILib_InvoiceLevel4DataModel>();
    private string ViewInvoiceId { get; set; } = "";
    private bool disableInvoiceDetailsView = true;
    private int TotalVar = 0;
    private double TotalBig = 0;
    private int TotalSmall = 0;
    private double TotalAmount = 0;
    private BetHistory4DPopUp popupRef;


    private void SetBetHistoryFor(string value)
    {
        BetHistoryForId = value;
    }
    private void SetBetHistoryFrom(DateTime value)
    {
        BetHistoryFrom = value;
    }
    private void SetBetHistoryTo(DateTime value)
    {
        BetHistoryTo = value;
    }

    private async Task SetBetHistoryDisplay()
    {
        BetHistoryInvoiceList = await invoiceData.GetBetHistoryForUserWithinDateRange(BetHistoryForId, BetHistoryFrom, BetHistoryTo);
    }

    private async Task DisplayInvoiceDetails(ILib_InvoiceLevel1DataModel invoice)
    {
        disableInvoiceDetailsView = false;
        ViewInvoiceId = invoice.InvoiceId;
        DetailsForSelectedInvoice = await invoiceData.GetDetailsOfSelectedInvoice(invoice.InvoiceId);
        foreach(var item in DetailsForSelectedInvoice)
        {
            TotalVar += item.NoOfVariations;
        }
        TotalBig = invoice.TotalBig;
        TotalSmall = invoice.TotalSmall;
        TotalAmount = invoice.TotalAmount;
    }
    private async Task DisplayNumberVariations(ILib_InvoiceLevel2DataModel invoice)
    {
        NumberVariationsForSelectedInvoice = await invoiceData.GetNumberVariationsOfSelectedNumberInInvoice(invoice.InvoiceId, invoice.Number);
        popupRef.Show();
    }
}
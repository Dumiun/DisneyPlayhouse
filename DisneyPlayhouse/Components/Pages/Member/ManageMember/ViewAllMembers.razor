@using DisneyPlayhouse.Data
@using DisneyPlayhouse.Models
@using DisneyPlayhouseLibrary.Data
@using DisneyPlayhouseLibrary.Models
@using Microsoft.AspNetCore.Identity
@inject IMemberData memberData
@inject UserManager<ApplicationUser> UserManager


<div class="container">
    <div class="row">
        <div class="col-md-12">
<table class="table table-bordered text-sm-center">
    <thead style="background-color:steelblue; color:white; ">
        <tr>
            <th colspan="2">Member ID</th>
            <th>Role</th>
            <th>Phone No.</th>
            <th>Ticket %</th>
            <th>Credit</th>
            <th>Currency</th>
            <th>Actions</th>
        </tr>
    </thead>
    
    <tbody style="font-size:medium;" class="table-light">
                    @foreach (var member in memberViewAll)
                    {
                        <tr>
                            <td>
                            </td>
                            <td class="text-dark"><b>@member.MemberId</b></td>
                            <td>@member.Role</td>
                            <td>@member.HandPhoneNo</td>
                            <td>@member.CommsPercentage</td>
                            <td>@member.CreditAmount</td>
                            <td>@member.CurrencyType</td>
                            <td>
                                <button class="btn btn-success btn-sm m-1">Add Member</button>
                                <button class="btn btn-warning btn-sm m-1">Modify Member</button>
                            </td>
                        </tr>
        }
                </tbody>
            </table>

        </div>
    </div>
</div>

@code {
    private List<Lib_ManageMemberViewModel> memberViewAll = new List<Lib_ManageMemberViewModel>();
    private List<ILib_ListOfChildIdModel> names = new List<ILib_ListOfChildIdModel>();
    private string? currentUserId = "";
    [CascadingParameter] public Task<AuthenticationState> AuthStateTask { get; set; }

    protected override async Task OnInitializedAsync()
    {
        currentUserId = AuthStateTask.Result.User.Identity.Name;
        names = await memberData.GetListOfChildId(currentUserId);

        foreach (var name in names)
        {
            Lib_ManageMemberViewModel viewData = new Lib_ManageMemberViewModel();
            viewData.MemberId = name.ChildId;
            var user = await UserManager.FindByNameAsync(name.ChildId);
            var userRole = await UserManager.GetRolesAsync(user);
            viewData.Role = userRole[0];
            viewData.HandPhoneNo = user.PhoneNumber;
            viewData.CommsPercentage = 10;
            viewData.CreditAmount = 30000;
            viewData.CurrencyType = user.CurrencyType;
            memberViewAll.Add(viewData);
        }
    }

}
@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using DisneyPlayhouse.Components.Account
@using DisneyPlayhouse.Models
@using DisneyPlayhouseLibrary.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using DisneyPlayhouse.Data
@using DisneyPlayhouseLibrary.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IMemberData memberData



<EditForm Model="MemberSetting" method="post" OnValidSubmit="HandleModifyProfile" FormName="modify">
    <DataAnnotationsValidator />
    <div class="row">
        <div class="col-md-4">
            <h2>1. Select Member ID</h2>
            <hr />
            @if (ModifyUser == "")
            {
                <div class="form-floating mb-3">
                    <InputSelect @bind-Value="@MemberSetting.LoginId" @oninput="HandleSelectedUser" class="form-select">
                        <option value="">Select Member ID</option>
                        @if (names != null && names.Count > 0)
                        {
                            @foreach (var name in names)
                            {
                                <option value="@name.ChildId">@name.ChildId</option>
                            }
                        }
                    </InputSelect>
                    <label for="parentId">Select ID to Modify</label>
                </div>
            }
            @if (ModifyUser != "" && ModifyUser != null)
            {
                <div class="form-floating mb-3">
                    <InputText @bind-Value="@MemberSetting.LoginId" class="form-control" readonly />
                    <label for="parentId">Member ID</label>
                </div>
            }
        </div>
        @if (MemberSetting.LoginId != "" && MemberSetting.LoginId != null)
        {
            <div class="col-md-7">
                <h2>2. Modify Details</h2>
                <hr />
                <div class="alert alert-warning">All Fields cannot be empty</div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="MemberSetting.Password" class="form-control" autocomplete="new-password" aria-required="true" />
                            <label for="password">Password</label>
                            <ValidationMessage For="() => MemberSetting.Password" class="text-danger" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="MemberSetting.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" />
                            <label for="confirm-password">Confirm Password</label>
                            <ValidationMessage For="() => MemberSetting.ConfirmPassword" class="text-danger" />
                        </div>
                    </div>
                </div>

                <div class="row mt-1 mb-4">
                    <div class="col-md-12">
                        <InputCheckbox type="checkbox" class="btn-check" id="btn-check-outlined" autocomplete="off" @bind-Value="MemberSetting.isAutoCredit" />
                        @if (MemberSetting.isAutoCredit == true)
                        {
                            <label class="btn btn-outline-primary" for="btn-check-outlined">Click to Disable Auto Credit</label>
                        }
                        @if (MemberSetting.isAutoCredit == false)
                        {
                            <label class="btn btn-outline-primary" for="btn-check-outlined">Click to Enable Auto Credit</label>
                        }
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-floating mb-3">
                            <InputSelect @bind-Value="MemberSetting.CurrencyType" class="form-select">
                                <option value="SGD">SGD</option>
                                <option value="USD">USD</option>
                            </InputSelect>
                            <label for="select-role">Select Currency</label>
                            <ValidationMessage For="() => MemberSetting.CurrencyType" class="text-danger" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="MemberSetting.PhoneNumber" class="form-control" aria-required="true" />
                            <label for="phone-number" class="form-label">Phone Number</label>
                            <ValidationMessage For="() => MemberSetting.PhoneNumber" class="text-danger" />
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">

                        <div class="form-floating mb-3">
                            <InputNumber type="number" @bind-Value="MemberSetting.Credit" class="form-control" />
                            <label>Credit Amount:</label>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-floating mb-3">
                            <InputSelect type="number" @bind-Value="MemberSetting.TicketComms" class="form-select">
                                <option value="0">0.0%</option>
                                <option value="0.5">0.5%</option>
                                <option value="1">1.0%</option>
                                <option value="1.5">1.5%</option>
                                <option value="2">2.0%</option>
                                <option value="2.5">2.5%</option>
                                <option value="3">3.0%</option>
                                <option value="3.5">3.5%</option>
                                <option value="4">4.0%</option>
                                <option value="4.5">4.5%</option>
                                <option value="5">5.0%</option>
                                <option value="5.5">5.5%</option>
                                <option value="6">6.0%</option>
                                <option value="6.5">6.5%</option>
                                <option value="7">7.0%</option>
                                <option value="7.5">7.5%</option>
                                <option value="8">8.0%</option>
                                <option value="8.5">8.5%</option>
                                <option value="9">9.0%</option>
                                <option value="9.5">9.5%</option>
                                <option value="10">10.0%</option>
                            </InputSelect>
                            <label for="select-Comms">Ticket Commisions</label>
                            <ValidationMessage For="() => MemberSetting.TicketComms" class="text-danger" />
                        </div>
                    </div>
                </div>

                <div class="row mt-1 mb-4">
                    <div class="col-md-12">
                        <hr />
                        <button type="submit" class="w-100 btn btn-lg btn-primary">Submit Changes</button>
                    </div>
                </div>

            </div>

        }
    </div>
</EditForm>

@code {
    [Parameter]public InputModel MemberSetting { get; set; } = new InputModel();
    [Parameter]public string ModifyUser { get; set; }
    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }
    [CascadingParameter]
    private HttpContext HttpContext { get; set; } = default!;
    private string? currentUserId = "";
    private List<ILib_ListOfChildIdModel> names = new List<ILib_ListOfChildIdModel>();

    [Parameter] public EventCallback RefreshComponent { get; set; }


    private string? username;
    private string? phoneNumber;
    private string? currencyType;
    private double userTicketComms;
    private double userCredit;

    protected override async Task OnInitializedAsync()
    {
        currentUserId = AuthStateTask.Result.User.Identity.Name;
        names = await memberData.GetListOfChildId(currentUserId);

        if (!string.IsNullOrEmpty(ModifyUser))
        {
            MemberSetting.LoginId = ModifyUser;
            MemberSetting.TicketComms = await memberData.GetTicketCommsOfUser(ModifyUser);
            MemberSetting.isAutoCredit = await memberData.GetIsAutoCreditOfUser(ModifyUser);
            MemberSetting.Credit = await memberData.GetCreditOfUser(ModifyUser);
        }
    }

    private async Task HandleSelectedUser(ChangeEventArgs e)
    {
        string selecteduser = e.Value.ToString();
        var user = await UserManager.FindByNameAsync(selecteduser);
        MemberSetting.PhoneNumber = await UserManager.GetPhoneNumberAsync(user);
        MemberSetting.CurrencyType = user.CurrencyType;
        MemberSetting.TicketComms = await memberData.GetTicketCommsOfUser(selecteduser);
        MemberSetting.isAutoCredit = await memberData.GetIsAutoCreditOfUser(selecteduser);
        MemberSetting.Credit = await memberData.GetCreditOfUser(selecteduser);
    }

    private async Task HandleModifyProfile()
    {
        var user = await UserManager.FindByNameAsync(MemberSetting.LoginId);

        if (MemberSetting.Password != null && MemberSetting.Password != "" && MemberSetting.Password == MemberSetting.ConfirmPassword)
        {
            var token = await UserManager.GeneratePasswordResetTokenAsync(user);
            var result = await UserManager.ResetPasswordAsync(user, token, MemberSetting.Password);
        }

            user.CurrencyType = MemberSetting.CurrencyType;
            await memberData.UpdatedMemberTicketComms(MemberSetting.LoginId, MemberSetting.TicketComms);
            await memberData.UpdatedMemberCredit(MemberSetting.LoginId, MemberSetting.Credit);
            user.PhoneNumber = MemberSetting.PhoneNumber;
            var UpdateResult = await UserManager.UpdateAsync(user);

        await RefreshComponent.InvokeAsync();
    }

    public class InputModel
    {
        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "Login ID")]
        public string LoginId { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 8)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        [RegularExpression(@"^(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,}$", ErrorMessage = "Password must contain at least one uppercase letter, one digit, one special character, and be at least 8 characters long.")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "Currency Type")]
        public string CurrencyType { get; set; } = "";

        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "Phone Number")]
        public string PhoneNumber { get; set; } = "";

        [Required]
        [Display(Name = "Ticket Commision")]
        public double TicketComms { get; set; } = 0.0;

        public bool isAutoCredit { get; set; } = false;

        public double Credit { get; set; } = 0.0;
    }
}

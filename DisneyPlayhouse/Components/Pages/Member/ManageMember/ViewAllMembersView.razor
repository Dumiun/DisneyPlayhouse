@using DisneyPlayhouse.Data
@using DisneyPlayhouseLibrary.Data
@using DisneyPlayhouseLibrary.Models
@using Microsoft.AspNetCore.Identity
@inject IMemberData memberData
@inject UserManager<ApplicationUser> UserManager


<tr>
    <td>
        @if (hasChild && displayButton)
        {
            <button class="btn btn-primary btn-sm m-1" @onclick="HandleViewDownline">+</button>
        }

    </td>
    <td class="text-dark"><b>@memberChilds.MemberId</b></td>
    <td>@memberChilds.Role</td>
    <td>@memberChilds.HandPhoneNo</td>
    <td>@memberChilds.CommsPercentage</td>
    <td>@memberChilds.CreditAmount</td>
    <td>@memberChilds.CurrencyType</td>
    <td>
        <button class="btn btn-success btn-sm m-1" @onclick="HandleAddMember">Add Member</button>
        <button class="btn btn-warning btn-sm m-1">Modify Member</button>
    </td>
</tr>

@if(hasChild == true)
{
                    @foreach(var child in childs)
                    {
                        <ViewAllMembersView memberChilds="@child"></ViewAllMembersView>
                    }
}

@code {
    [Parameter] public ILib_ManageMemberViewChildModel memberChilds { get; set; } = new Lib_ManageMemberViewChildModel();
    private bool hasChild = false;
    private bool displayButton = true;
    private string? UserId = "";
    private List<ILib_ListOfChildIdModel> names = new List<ILib_ListOfChildIdModel>();
    private List<ILib_ManageMemberViewChildModel> childs = new List<ILib_ManageMemberViewChildModel>();
    [Parameter] public EventCallback<string> AddMemberHandler { get; set; }
    [Parameter] public string IdForHandler { get; set; } = "";


    protected override async Task OnInitializedAsync()
    {
        UserId = memberChilds.MemberId;
        names = await memberData.GetListOfDirectChildId(UserId);
        if (names.Count > 0)
        {
            hasChild = true;
        }
        IdForHandler = memberChilds.MemberId;
    }

    private async Task HandleViewDownline()
    {
        displayButton = false;
        foreach (var name in names)
        {
            Lib_ManageMemberViewChildModel childData = new Lib_ManageMemberViewChildModel();
            childData.MemberParentId = UserId;
            childData.MemberId = name.ChildId;
            var user = await UserManager.FindByNameAsync(name.ChildId);
            var userRole = await UserManager.GetRolesAsync(user);
            childData.Role = userRole[0];
            childData.HandPhoneNo = user.PhoneNumber;
            childData.CommsPercentage = 10;
            childData.CreditAmount = 30000;
            childData.CurrencyType = user.CurrencyType;
            childs.Add(childData);
        }
    }

    private async Task HandleAddMember()
    {
            await AddMemberHandler.InvokeAsync(IdForHandler);
    }
}

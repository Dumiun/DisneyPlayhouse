@using System.ComponentModel.DataAnnotations
@using System.Text
@using System.Text.Encodings.Web
@using DisneyPlayhouse.Components.Account
@using DisneyPlayhouse.Models
@using DisneyPlayhouseLibrary.Models
@using Microsoft.AspNetCore.Identity
@using Microsoft.AspNetCore.WebUtilities
@using DisneyPlayhouse.Data
@using DisneyPlayhouseLibrary.Data

@inject UserManager<ApplicationUser> UserManager
@inject IUserStore<ApplicationUser> UserStore
@inject SignInManager<ApplicationUser> SignInManager
@inject IEmailSender<ApplicationUser> EmailSender
@inject NavigationManager NavigationManager
@inject IdentityRedirectManager RedirectManager
@inject IMemberData memberData



    <EditForm Model="Input" asp-route-returnUrl="@ReturnUrl" method="post" OnValidSubmit="RegisterUser" FormName="register">
        <DataAnnotationsValidator />
        <div class="row">
            <div class="col-md-4">
                <h2>1. Select Parent ID</h2>
                <hr />
                @if (NewMemberForUser == "")
                {
                    <div class="form-floating mb-3">
                        <InputSelect @bind-Value="@Input.AssignedParentLoginId" class="form-select">
                        <option value="">Select Member ID</option>
                            <option value="@currentUserId">@currentUserId</option>
                            @if (names != null && names.Count > 0)
                            {
                                @foreach (var name in names)
                                {
                                    <option value="@name.ChildId">@name.ChildId</option>
                                }
                        }
                    </InputSelect>
                    <label for="parentId">Select Parent ID</label>
                </div>
                }
                @if (NewMemberForUser != "")
                {
                    <div class="form-floating mb-3">
                        <InputText @bind-Value="@Input.AssignedParentLoginId" class="form-control" readonly />
                        <label for="parentId">Parent ID : </label>
                    </div>
                }
            </div>
            @if (Input.AssignedParentLoginId != "" && Input.AssignedParentLoginId != null)
            {
                <div class="col-md-7">
                    <h2>2. Enter Details</h2>
                    <hr />
                    <div class="row">
                        <div class="col-md-6">
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Input.LoginId" class="form-control" autocomplete="username" aria-required="true"  />
                            <label for="email">Login ID</label>
                            <ValidationMessage For="() => Input.LoginId" class="text-danger" />
                        </div>
                            </div>
                <div class="col-md-6">
                        <div class="form-floating mb-3">
                            <InputText @bind-Value="Input.PhoneNumber" class="form-control" aria-required="true"  />
                            <label for="phone-number" class="form-label">Phone Number</label>
                            <ValidationMessage For="() => Input.PhoneNumber" class="text-danger" />
                        </div>
                    </div>
                        </div>
                <div class="row">
                    <div class="col-md-6">
                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="Input.Password" class="form-control" autocomplete="new-password" aria-required="true" />
                            <label for="password">Password</label>
                            <ValidationMessage For="() => Input.Password" class="text-danger" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-floating mb-3">
                            <InputText type="password" @bind-Value="Input.ConfirmPassword" class="form-control" autocomplete="new-password" aria-required="true" />
                            <label for="confirm-password">Confirm Password</label>
                            <ValidationMessage For="() => Input.ConfirmPassword" class="text-danger" />
                        </div>
                    </div>
                </div>

                <div class="row mt-1 mb-4">
                <div class="col-md-12">
                        <InputCheckbox type="checkbox" class="btn-check" id="btn-check-outlined" autocomplete="off" @bind-Value="Input.isAutoCredit" />
                        @if (Input.isAutoCredit == true)
                        {
                            <label class="btn btn-outline-primary" for="btn-check-outlined">Click to Disable Auto Credit</label>
                        }
                        @if (Input.isAutoCredit == false)
                        {
                            <label class="btn btn-outline-primary" for="btn-check-outlined">Click to Enable Auto Credit</label>
                        }
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">
                        <div class="form-floating mb-3">
                            <InputSelect @bind-Value="Input.CurrencyType" class="form-select">
                                <option value="SGD">SGD</option>
                                <option value="USD">USD</option>
                            </InputSelect>
                            <label for="select-role">Select Currency</label>
                            <ValidationMessage For="() => Input.CurrencyType" class="text-danger" />
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-floating mb-3">
                            <InputSelect @bind-Value="Input.Role" class="form-select">
                                <option value="Member">Member</option>
                            </InputSelect>
                            <label for="select-role">Select Role</label>
                            <ValidationMessage For="() => Input.Role" class="text-danger" />
                        </div>
                    </div>
                </div>

                <div class="row">
                    <div class="col-md-6">

                            <div class="form-floating mb-3">
                                <InputNumber type="number" @bind-Value="Input.Credit" class="form-control" />
                                <label>Credit Amount:</label>
                        </div>
                    </div>
                    <div class="col-md-6">
                        <div class="form-floating mb-3">
                            <InputSelect type="number" @bind-Value="Input.TicketComms" class="form-select">
                                <option value="0">0.0%</option>
                                <option value="0.5">0.5%</option>
                                <option value="1">1.0%</option>
                                <option value="1.5">1.5%</option>
                                <option value="2">2.0%</option>
                                <option value="2.5">2.5%</option>
                                <option value="3">3.0%</option>
                                <option value="3.5">3.5%</option>
                                <option value="4">4.0%</option>
                                <option value="4.5">4.5%</option>
                                <option value="5">5.0%</option>
                                <option value="5.5">5.5%</option>
                                <option value="6">6.0%</option>
                                <option value="6.5">6.5%</option>
                                <option value="7">7.0%</option>
                                <option value="7.5">7.5%</option>
                                <option value="8">8.0%</option>
                                <option value="8.5">8.5%</option>
                                <option value="9">9.0%</option>
                                <option value="9.5">9.5%</option>
                                <option value="10">10.0%</option>
                            </InputSelect>
                            <label for="select-Comms">Ticket Commisions</label>
                            <ValidationMessage For="() => Input.TicketComms" class="text-danger" />
                        </div>
                    </div>
                </div>

                <div class="row mt-1 mb-4">
                    <div class="col-md-12">
                        <hr />
                        <button type="submit" class="w-100 btn btn-lg btn-primary">Register</button>
                    </div>
                </div>

                </div>

            }
        </div>
    </EditForm>

@code {
    private IEnumerable<IdentityError>? identityErrors;
    private ILib_MemberDetailsModel newMemberDetails = new MemberDetailsModel();
    private List<ILib_ListOfParentIdModel> parents = new List<ILib_ListOfParentIdModel>();

    private List<ILib_ListOfChildIdModel> names = new List<ILib_ListOfChildIdModel>();
    private string? currentUserId = "";
    [Parameter] public string NewMemberForUser { get; set; } = "";

    [Parameter] public EventCallback RefreshComponent { get; set; }


    [CascadingParameter]
    public Task<AuthenticationState> AuthStateTask { get; set; }

    [SupplyParameterFromForm]
    private InputModel Input { get; set; } = new();

    [SupplyParameterFromQuery]
    private string? ReturnUrl { get; set; }

    private string? Message => identityErrors is null ? null : $"Error: {string.Join(", ", identityErrors.Select(error => error.Description))}";
    [Parameter]
    public string MemberId { get; set; }
    protected override async Task OnInitializedAsync()
    {
        currentUserId = AuthStateTask.Result.User.Identity.Name;
        names = await memberData.GetListOfChildId(currentUserId);
        if (!string.IsNullOrEmpty(MemberId))
        {
            Input.AssignedParentLoginId = MemberId;
        }
        if (NewMemberForUser != "")
        {
            Input.AssignedParentLoginId = NewMemberForUser;
        }
    }

    public async Task RegisterUser(EditContext editContext)
    {
        var user = CreateUser();

        await UserStore.SetUserNameAsync(user, Input.LoginId, CancellationToken.None);
        user.CurrencyType = Input.CurrencyType;
        user.PhoneNumber = Input.PhoneNumber;
        //var emailStore = GetEmailStore();
        //await emailStore.SetEmailAsync(user, Input.Email, CancellationToken.None);
        var result = await UserManager.CreateAsync(user, Input.Password);

        if (!result.Succeeded)
        {
            identityErrors = result.Errors;
            return;
        }
        await UserManager.AddToRoleAsync(user, Input.Role);

        newMemberDetails.LoginId = Input.LoginId;
        newMemberDetails.ParentLoginId = Input.AssignedParentLoginId;
        newMemberDetails.AutoCredit = Input.isAutoCredit;
        newMemberDetails.CreatedDate = DateTime.Now;
        newMemberDetails.LatestLoggedInDate = DateTime.Now;
        newMemberDetails.Credit = Input.Credit;
        newMemberDetails.TicketComms = Input.TicketComms;


        await memberData.CreateNewMemberDetails(newMemberDetails);
        await memberData.CreateNewMemberRelationship(newMemberDetails);

        await RefreshComponent.InvokeAsync();
    }

    private ApplicationUser CreateUser()
    {
        try
        {
            return Activator.CreateInstance<ApplicationUser>();
        }
        catch
        {
            throw new InvalidOperationException($"Can't create an instance of '{nameof(ApplicationUser)}'. " +
                $"Ensure that '{nameof(ApplicationUser)}' is not an abstract class and has a parameterless constructor.");
        }
    }

    private sealed class InputModel
    {
        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "Login ID")]
        public string LoginId { get; set; } = "";

        [Required]
        [StringLength(100, ErrorMessage = "The {0} must be at least {2} and at max {1} characters long.", MinimumLength = 8)]
        [DataType(DataType.Password)]
        [Display(Name = "Password")]
        [RegularExpression(@"^(?=.*[A-Z])(?=.*\d)(?=.*[^\da-zA-Z]).{8,}$", ErrorMessage = "Password must contain at least one uppercase letter, one digit, one special character, and be at least 8 characters long.")]
        public string Password { get; set; } = "";

        [DataType(DataType.Password)]
        [Display(Name = "Confirm password")]
        [Compare("Password", ErrorMessage = "The password and confirmation password do not match.")]
        public string ConfirmPassword { get; set; } = "";

        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "Role")]
        public string Role { get; set; } = "";

        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "Currency Type")]
        public string CurrencyType { get; set; } = "";

        [Required]
        [DataType(DataType.Text)]
        [Display(Name = "Phone Number")]
        public string PhoneNumber { get; set; } = "";

        [Required]
        [Display(Name = "Ticket Commision")]
        public double TicketComms { get; set; } = 0.0;

        public bool isAutoCredit { get; set; } = false;
        public string AssignedParentLoginId { get; set; } = "";
        public double Credit { get; set; } = 0.0;
    }
}
